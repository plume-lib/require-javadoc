plugins {
  id 'java'
  id 'application'

  // To create a fat jar build/libs/...-all.jar, run: ./gradlew shadowJar
  id 'com.github.johnrengelman.shadow' version '8.1.1'

  // Code formatting; defines targets "spotlessApply" and "spotlessCheck"
  // Version 6.14.0 and later requires JRE 11+, but version 6.13.0 doesn't work on JRE 21.
  id 'com.diffplug.spotless' version '6.13.0'

  // Error Prone linter
  id('net.ltgt.errorprone') version '4.0.1'

  // Checker Framework pluggable type-checking
  id 'org.checkerframework' version '0.6.40'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

// Error Prone versions later than 2.10.0 require JDK 11.
ext.errorproneVersion = '2.10.0'

ext {
  isJava21orHigher = JavaVersion.current() >= JavaVersion.VERSION_21
}

dependencies {
  implementation "com.google.errorprone:error_prone_annotations:${errorproneVersion}"
  implementation 'com.github.javaparser:javaparser-core:3.26.1'
  implementation 'org.plumelib:options:2.0.3'
  implementation 'com.google.code.gson:gson:2.11.0'
}

// To upload to Maven Central, see instructions in the file.
apply from: "${buildscript.sourceFile.parent}/gradle/mavencentral.gradle"

application {
  mainClass = 'org.plumelib.javadoc.RequireJavadoc'
}

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}


if (! isJava21orHigher) {
  spotless {
    format 'misc', {
      // define the files to apply `misc` to
      target '*.md', '.gitignore'

      // define the steps to apply to those files
      trimTrailingWhitespace()
      indentWithSpaces(2)
      endWithNewline()
    }
    java {
      targetExclude('**/WeakIdentityHashMap.java')
      googleJavaFormat()
      formatAnnotations()
    }
    groovyGradle {
      target '**/*.gradle'
      greclipse()  // which formatter Spotless should use to format .gradle files.
      indentWithSpaces(2)
      trimTrailingWhitespace()
      // endWithNewline() // Don't want to end empty files with a newline
    }
  }
}

/// Error Prone linter

dependencies {
  errorprone("com.google.errorprone:error_prone_core:${errorproneVersion}")
}
tasks.withType(JavaCompile).configureEach {
  // "-processing" avoids javac warning "No processor claimed any of these annotations".
  // "-Xlint:-options" is because of JDK 21 warning "source value 8 is obsolete..."
  options.compilerArgs << '-Xlint:all,-processing,-options' << '-Werror'
  options.errorprone {
    // ExtendsObject does not yet exist in Error Prone 2.10.0.
    // disable('ExtendsObject')  // Incorrect when using the Checker Framework
    disable('ReferenceEquality') // Use Interning Checker instead.
    disable('AnnotateFormatMethod') // Error Prone doesn't know about Checker Framework @FormatMethod
  }
}

/// Checker Framework pluggable type-checking

apply plugin: 'org.checkerframework'

checkerFramework {
  checkers = [
    // No need to run CalledMethodsChecker, because ResourceLeakChecker does so.
    // 'org.checkerframework.checker.calledmethods.CalledMethodsChecker',
    'org.checkerframework.checker.formatter.FormatterChecker',
    'org.checkerframework.checker.index.IndexChecker',
    'org.checkerframework.checker.interning.InterningChecker',
    'org.checkerframework.checker.lock.LockChecker',
    'org.checkerframework.checker.nullness.NullnessChecker',
    'org.checkerframework.checker.regex.RegexChecker',
    'org.checkerframework.checker.resourceleak.ResourceLeakChecker',
    'org.checkerframework.checker.signature.SignatureChecker',
    'org.checkerframework.checker.signedness.SignednessChecker',
    'org.checkerframework.common.initializedfields.InitializedFieldsChecker',
  ]
  extraJavacArgs = [
    // No "'-Werror'" because of JDK 21 warning "source value 8 is obsolete..."
    // '-Werror',
    '-AcheckPurityAnnotations',
    '-ArequirePrefixInWarningSuppressions',
    '-AwarnRedundantAnnotations',
    '-AwarnUnneededSuppressions',
  ]
}
// To use a snapshot version of the Checker Framework.
if (false) {
  // TODO: Change the above test to false when CF is released.
  ext.checkerFrameworkVersion = '3.44.0'
  dependencies {
    compileOnly "org.checkerframework:checker-qual:${checkerFrameworkVersion}"
    testCompileOnly "org.checkerframework:checker-qual:${checkerFrameworkVersion}"
    checkerFramework "org.checkerframework:checker:${checkerFrameworkVersion}"
  }
  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'minutes'
  }
}
// To use a locally-built Checker Framework, run gradle with "-PcfLocal".
if (project.hasProperty('cfLocal')) {
  def cfHome = String.valueOf(System.getenv('CHECKERFRAMEWORK'))
  dependencies {
    compileOnly files(cfHome + '/checker/dist/checker-qual.jar')
    testCompileOnly files(cfHome + '/checker/dist/checker-qual.jar')
    checkerFramework files(cfHome + '/checker/dist/checker.jar')
  }
}

/// Javadoc

// Turn Javadoc warnings into errors.
javadoc {
  // No "'-Werror'" because of JDK 21 warning "source value 8 is obsolete..."
  // options.addStringOption('Xwerror', '-Xdoclint:all')
  options.addStringOption('Xdoclint:all', '-quiet')
  options.addStringOption('private', '-quiet')
  options.addStringOption('source', '8')
  doLast {
    ant.replaceregexp(match:"@import url\\('resources/fonts/dejavu.css'\\);\\s*", replace:'',
    flags:'g', byline:true) {
      fileset(dir: destinationDir)
    }
  }
}
check.dependsOn javadoc

task javadocWeb(type: Javadoc) {
  description 'Upload API documentation to website.'
  source = sourceSets.main.allJava
  destinationDir = file("/cse/web/research/plumelib/${project.name}/api")
  classpath = project.sourceSets.main.compileClasspath
  options.addStringOption('source', '8')
  doLast {
    ant.replaceregexp(match:"@import url\\('resources/fonts/dejavu.css'\\);\\s*", replace:'',
    flags:'g', byline:true) {
      fileset(dir: destinationDir)
    }
    // Set permissions
    project.exec {
      commandLine('chgrp', '-R',  'plse_www', "/cse/web/research/plumelib/${project.name}/api")
    }
    project.exec {
      commandLine('chmod', '-R',  'g+w', "/cse/web/research/plumelib/${project.name}/api")
    }
  }
}

// Run require-javadoc on itself.
configurations {
  requireJavadoc
}
dependencies {
  requireJavadoc 'org.plumelib:require-javadoc:1.0.9'
}
task requireJavadoc(type: JavaExec) {
  // "dependsOn jar" because this is the requireJavadoc project itself, and
  // Gradle uses the built-from-source version of
  // 'org.plumelib:require-javadoc'.  So declare a dependency on it.
  dependsOn jar
  group = 'Documentation'
  description = 'Ensures that Javadoc documentation exists.'
  mainClass = 'org.plumelib.javadoc.RequireJavadoc'
  classpath = configurations.requireJavadoc
  args 'src/main/java'
}
check.dependsOn requireJavadoc

/// Emacs support

/* Make Emacs TAGS table */
task tags(type: Exec) {
  description 'Run etags to create an Emacs TAGS table'
  commandLine 'bash', '-c', "find src/ -name '*.java' | sort | xargs etags"
}
