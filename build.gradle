plugins {
  // To create a fat jar build/libs/require-javadoc-all.jar, run: ./gradlew shadowJar
  id "com.github.johnrengelman.shadow" version "5.1.0"

  // Run the Error Prone linter.
  // id "net.ltgt.errorprone-base" version "0.0.16"
  // Checker Framework pluggable type-checking
  id 'org.checkerframework' version '0.4.0'

  // Formatting is disabled due to poor handling of type annotations; wait until
  // this issue is fixed: https://github.com/google/google-java-format/issues/5
  // // Code formatting with Google Java Format; defines targets "goJF" and "verJF".
  // id "com.github.sherter.google-java-format" version "0.7.1"
}

apply plugin: 'java-library'

// To upload to Maven Central, see instructions in the file.
apply from: "${buildscript.sourceFile.parent}/gradle/mavencentral.gradle"

dependencies {
  // errorprone 'com.google.errorprone:error_prone_core:2.3.3'
}

repositories {
  mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// Checker Framework pluggable type-checking
apply plugin: 'org.checkerframework'
checkerFramework {
  checkers = [
    'org.checkerframework.checker.formatter.FormatterChecker',
    'org.checkerframework.checker.index.IndexChecker',
    'org.checkerframework.checker.interning.InterningChecker',
    'org.checkerframework.checker.lock.LockChecker',
    'org.checkerframework.checker.nullness.NullnessChecker',
    'org.checkerframework.checker.regex.RegexChecker',
    'org.checkerframework.checker.signature.SignatureChecker'
  ]
  extraJavacArgs = [
    '-Werror',
    "-Astubs=checker.jar/javadoc.astub",
    '-AcheckPurityAnnotations',
    '-ArequirePrefixInWarningSuppressions',
    '-AwarnUnneededSuppressions'
  ]
}

// Turn Javadoc warnings into errors.
javadoc {
  options.addStringOption('Xwerror', '-Xdoclint:all')
  options.addStringOption('private', '-quiet')
}

task javadocWeb(type: Javadoc) {
  source = sourceSets.main.allJava
  destinationDir = file("/cse/web/research/plumelib/require-javadoc/api")
  classpath = project.sourceSets.main.compileClasspath
}

// Work around https://github.com/johnrengelman/shadow/issues/324
configurations {
  toolsJar  // tools.jar contains the Javadoc tool
}
dependencies {
  toolsJar files(org.gradle.internal.jvm.Jvm.current().toolsJar)
}
configurations.compileClasspath.extendsFrom configurations.toolsJar

/* Make Emacs TAGS table */
task tags(type: Exec) {
  description "Run etags to create an Emacs TAGS table"
  commandLine "bash", "-c", "find src/ -name '*.java' | sort | xargs etags"
}
