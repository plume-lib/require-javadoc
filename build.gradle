plugins {
  id 'java'
  id 'application'

  // To create a fat jar build/libs/require-javadoc-all.jar, run: ./gradlew shadowJar
  id 'com.github.johnrengelman.shadow' version '7.1.2'

  // Code formatting; defines targets "spotlessApply" and "spotlessCheck"
  id "com.diffplug.spotless" version "6.11.0"

  // Error Prone linter
  id("net.ltgt.errorprone") version "2.0.2"

  // Checker Framework pluggable type-checking
  id 'org.checkerframework' version '0.6.17'
}

repositories {
  mavenCentral()
}

dependencies {
  if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
    implementation 'org.plumelib:options:1.0.5'
  } else {
    implementation 'org.plumelib:options:2.0.0'
  }
  implementation group: 'com.github.javaparser', name: 'javaparser-core', version: '3.24.4'
}

// To upload to Maven Central, see instructions in the file.
apply from: "${buildscript.sourceFile.parent}/gradle/mavencentral.gradle"

sourceCompatibility = 1.8
targetCompatibility = 1.8

application {
  mainClass = 'org.plumelib.javadoc.RequireJavadoc'
}

spotless {
  format 'misc', {
    // define the files to apply `misc` to
    target '*.gradle', '*.md', '.gitignore'

    // define the steps to apply to those files
    trimTrailingWhitespace()
    indentWithSpaces(2)
    endWithNewline()
  }
  java {
    targetExclude("**/WeakIdentityHashMap.java")
    googleJavaFormat()
    formatAnnotations()
  }
}

/// Error Prone linter

dependencies {
  errorprone("com.google.errorprone:error_prone_core:2.15.0")
}
tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << "-Xlint:all,-processing" << "-Werror"
  options.errorprone {
    enabled = JavaVersion.current() != JavaVersion.VERSION_1_8
    // disable("ReferenceEquality") // Use Interning Checker instead.
    // disable("StringSplitter") // obscure case isn't likely
    // disable("AnnotateFormatMethod") // Error Prone doesn't know about Checker Framework @FormatMethod
    // disable("UseCorrectAssertInTests") // Java's `assert` statument is so much more readable
  }
}

/// Checker Framework pluggable type-checking

apply plugin: 'org.checkerframework'

checkerFramework {
  checkers = [
    'org.checkerframework.checker.calledmethods.CalledMethodsChecker',
    'org.checkerframework.checker.formatter.FormatterChecker',
    'org.checkerframework.checker.index.IndexChecker',
    'org.checkerframework.checker.interning.InterningChecker',
    'org.checkerframework.checker.lock.LockChecker',
    'org.checkerframework.checker.nullness.NullnessChecker',
    'org.checkerframework.checker.regex.RegexChecker',
    'org.checkerframework.checker.resourceleak.ResourceLeakChecker',
    'org.checkerframework.checker.signature.SignatureChecker',
    'org.checkerframework.checker.signedness.SignednessChecker',
    'org.checkerframework.common.initializedfields.InitializedFieldsChecker',
  ]
  extraJavacArgs = [
    '-Werror',
    '-AcheckPurityAnnotations',
    '-ArequirePrefixInWarningSuppressions',
    '-AwarnUnneededSuppressions',
  ]
}

// To use a locally-built Checker Framework, run gradle with "-PcfLocal".
if (project.hasProperty("cfLocal")) {
  def cfHome = String.valueOf(System.getenv("CHECKERFRAMEWORK"))
  dependencies {
    compileOnly files(cfHome + "/checker/dist/checker-qual.jar")
    testCompileOnly files(cfHome + "/checker/dist/checker-qual.jar")
    checkerFramework files(cfHome + "/checker/dist/checker.jar")
  }
}

/// Javadoc

// Turn Javadoc warnings into errors.
javadoc {
  options.addStringOption('Xwerror', '-Xdoclint:all')
  options.addStringOption('private', '-quiet')
  if (JavaVersion.current().compareTo(org.gradle.api.JavaVersion.VERSION_1_9) >= 0) {
    options.addStringOption('source', '8')
  }
  doLast {
    if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
      ant.replaceregexp(match:"@import url\\('resources/fonts/dejavu.css'\\);\\s*", replace:'',
        flags:'g', byline:true) {
        fileset(dir: destinationDir)
      }
    }
  }
}
check.dependsOn javadoc

task javadocWeb(type: Javadoc) {
  description "Upload API documentation to website."
  source = sourceSets.main.allJava
  destinationDir = file("/cse/web/research/plumelib/${project.name}/api")
  classpath = project.sourceSets.main.compileClasspath
  if (JavaVersion.current().compareTo(org.gradle.api.JavaVersion.VERSION_1_9) >= 0) {
    options.addStringOption('source', '8')
  }
  doLast {
    if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
      ant.replaceregexp(match:"@import url\\('resources/fonts/dejavu.css'\\);\\s*", replace:'',
        flags:'g', byline:true) {
        fileset(dir: destinationDir)
      }
    }
  }
}

// Run require-javadoc on itself.
configurations {
  requireJavadoc
}
dependencies {
  requireJavadoc "org.plumelib:require-javadoc:1.0.5"
}
task requireJavadoc(type: JavaExec) {
  // "dependsOn jar" because this is the requireJavadoc project, and Gradle uses
  // the built-from-source version of 'org.plumelib:require-javadoc'.  So declare
  // a dependency on it.
  dependsOn jar
  description = 'Ensures that Javadoc documentation exists.'
  mainClass = "org.plumelib.javadoc.RequireJavadoc"
  classpath = configurations.requireJavadoc
  args "src/main/java"
}
check.dependsOn requireJavadoc

/// Emacs support

/* Make Emacs TAGS table */
task tags(type: Exec) {
  description "Run etags to create an Emacs TAGS table"
  commandLine "bash", "-c", "find src/ -name '*.java' | sort | xargs etags"
}
